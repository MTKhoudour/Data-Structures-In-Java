package linkedLists;

class Node {
	Node next ; 
	Node prev ; 
	int data ; 
	
	Node(int _data){
		this.data = _data ;
		this.next = null ; 
		this.prev = null ;
	}
}

public class DLL {
	static Node head ; 
	
	static boolean isEmpty(){
		return head == null ; 
	}
	
	static void push(int xData){
		Node newNode = new Node(xData); 
		
		newNode.next = head ; 
		newNode.prev = null ; 
		
		if(head != null)
			head.prev = newNode ;
		
		head = newNode ; //Move head to point to newNode 
	}
	
	static void pushAfter(Node prevNode, int xData){
		if(prevNode == null)
			return ; 
		
		Node newNode = new Node(xData); 
		
		newNode.next = prevNode.next ; 
		prevNode.next = newNode ; 
		newNode.prev = prevNode ; 
	
		if(prevNode.next.prev != null)
			prevNode.next.prev = newNode ; 
	}
	
	static int lengthDLL(){
		Node temp = head ; 
		int counter = 0 ; 
		if (head == null) return 0 ;
		while(temp != null){
			counter++ ; 
			temp = temp.next ; 
		}
		return counter ; 
		
	}
	
	static void pushLast(int xData){
		Node temp = head ;  
		Node newNode = new Node(xData); 
		
		while(temp.next != null)
			temp = temp.next ; 
		
		temp.next = newNode ; 
		newNode.next = null ; 
		
		newNode.prev = temp ;
		
		
		
	}
	
	static void printDLL(DLL dll){

		Node temp = head ; 
		
		while(temp != null){
			System.out.print(temp.data + " -> ");
			temp = temp.next ; 
		}
		System.out.println("null");
	}

	static void insertAt(DLL list, int position, int xData){
		if(position <0 || isEmpty()) return ;
		Node temp = head ; 
		
		if(position == 0) push(xData) ; 
		if(position == lengthDLL()) pushLast(xData);
		
		for(int i=1 ; i < position-1; i++)
			temp = temp.next ;
		
		Node newNode = new Node(xData); 
		
		newNode.next = temp.next ; 
		temp.next = newNode ; 
		newNode.prev = temp ; 
	
		temp.next.prev = newNode ; 
		
	}

	static Node findNode(int xData){
		Node temp = head ; 
		
		while(temp != null && temp.data != xData)
			temp = temp.next ; 
		
		return temp ; 
		
	}
	/*
	static void deleteData(int xData){
		if( isEmpty() ) return ;  
		
		Node temp = head ;
		Node current = findNode(xData) ;
		Node prevCurr = current.prev ,nextCurr = current.next ; 
		
		// Delete Head 
		if(head.data == xData) head = temp.next ;
		//Deletes Last Node (Tail) 
		if(current.next == null){
			System.out.println("last node is  " + current.data + " , POOF !! It's Gone !");
			current.prev.next = current.next ;
			current.next = null ; 
		}
		
		// Delete node but not head and tail 
		if(prevCurr != null && nextCurr != null) {
			System.out.println("Node to be deleted :  " + current.data + " And POOF !! " );
		
			Node t = prevCurr ; 
			t.next = current.next ; 
			current.next = t ; 		
			t.prev = current.prev ; 
		}

	}
	
	*/

	public static void main(String[] args) {
		DLL myList = new DLL(); 
		myList.push(0);
		myList.push(63);
		myList.push(100);
		myList.push(222);
		myList.pushAfter(head, 57);
		myList.pushAfter(head.next, 98);
		printDLL(myList); 
		
		myList.pushLast(7);
		printDLL(myList); 

		System.out.println("Length is : " + myList.lengthDLL());
		
		insertAt(myList, 3, 8);
		printDLL(myList);
		
	//	myList.deleteData(222);
	//	printDLL(myList);
	//	System.out.println();
	
	//	myList.deleteData(7);
	//	printDLL(myList);
	
		System.out.println();
		
		
		myList.reverse() ;
		//myList.deleteData(8);
		printDLL(myList);
	}
}



